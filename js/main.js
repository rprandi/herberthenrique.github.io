function graphsFn(){for(var t="#1fb29b",e=document.getElementsByClassName("graph-progress"),n=e.length-1;n>=0;n--){var i=e[n],r=new ProgressBar.Circle(i,{color:"#aaa",strokeWidth:20,trailWidth:1,easing:"easeInOut",duration:1400,text:{autoStyleContainer:!1},from:{color:t,width:4},to:{color:t,width:4},step:function(t,e){e.path.setAttribute("stroke",t.color),e.path.setAttribute("stroke-width",t.width);var n=Math.round(100*e.value());0===n?e.setText(""):e.setText(n+"%")}});r.text.style.fontSize="2rem";var o=i.getAttribute("data-percent");r.animate(o/100)}}function activateGraph(){window.setTimeout(function(){var t=document.getElementsByClassName("graph-progress");return isScrolledIntoView(t[0])?graphsFn():void activateGraph()},500)}function ready(t){"loading"!=document.readyState?t():document.addEventListener("DOMContentLoaded",t)}function isScrolledIntoView(t){var e=t.getBoundingClientRect().top,n=t.getBoundingClientRect().bottom,i=e>=0&&n<=window.innerHeight;return i}window.bringIntoView_started=0,window.bringIntoView_ends=0,window.bringIntoView_y=0,window.bringIntoView_tick=function(){var t,e,n,i,r;i=Date.now(),i<window.bringIntoView_ends?(e=i-window.bringIntoView_started,n=window.bringIntoView_ends-window.bringIntoView_started,t=window.bringIntoView_y-document.body.scrollTop,r=t*(e/n),document.body.scrollTop+=r,window.requestAnimationFrame(window.bringIntoView_tick)):document.body.scrollTop=window.bringIntoView_y},window.bringIntoView=function(t,e){window.bringIntoView_started=Date.now(),window.bringIntoView_ends=window.bringIntoView_started+e,window.bringIntoView_y=Math.min(document.body.scrollTop+t.getBoundingClientRect().top,document.body.scrollHeight-window.innerHeight),window.requestAnimationFrame(window.bringIntoView_tick)},function(){function t(){n.classList.contains("show-menu")?n.classList.remove("show-menu"):n.classList.add("show-menu")}for(var e=document.querySelectorAll(".toggle-menu"),n=document.querySelector(".wrapper"),i=0;i<e.length;i++)e[i].addEventListener("click",t);document.addEventListener("keyup",function(e){27==e.keyCode&&n.classList.contains("show-menu")&&t()})}(),function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.ProgressBar=t()}}(function(){var t;return function e(t,n,i){function r(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return r(n?n:e)},c,c.exports,e,t,n,i)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<i.length;s++)r(i[s]);return r}({1:[function(e,n,i){(function(){var e=this||Function("return this")(),r=function(){"use strict";function r(){}function o(t,e){var n;for(n in t)Object.hasOwnProperty.call(t,n)&&e(n)}function s(t,e){return o(e,function(n){t[n]=e[n]}),t}function a(t,e){o(e,function(n){"undefined"==typeof t[n]&&(t[n]=e[n])})}function u(t,e,n,i,r,o,s){var a,u,c,p=t<o?0:(t-o)/r;for(a in e)e.hasOwnProperty(a)&&(u=s[a],c="function"==typeof u?u:d[u],e[a]=h(n[a],i[a],c,p));return e}function h(t,e,n,i){return t+(e-t)*n(i)}function c(t,e){var n=f.prototype.filter,i=t._filterArgs;o(n,function(r){"undefined"!=typeof n[r][e]&&n[r][e].apply(t,i)})}function p(t,e,n,i,r,o,s,a,h,p,l){b=e+n+i,S=Math.min(l||v(),b),x=S>=b,C=i-(b-S),t.isPlaying()&&(x?(h(s,t._attachment,C),t.stop(!0)):(t._scheduleId=p(t._timeoutHandler,m),c(t,"beforeTween"),S<e+n?u(1,r,o,s,1,1,a):u(S,r,o,s,i,e+n,a),c(t,"afterTween"),h(r,t._attachment,C)))}function l(t,e){var n={},i=typeof e;return"string"===i||"function"===i?o(t,function(t){n[t]=e}):o(t,function(t){n[t]||(n[t]=e[t]||g)}),n}function f(t,e){this._currentState=t||{},this._configured=!1,this._scheduleFunction=w,"undefined"!=typeof e&&this.setConfig(e)}var d,w,g="linear",_=500,m=1e3/60,y=Date.now?Date.now:function(){return+new Date},v="undefined"!=typeof SHIFTY_DEBUG_NOW?SHIFTY_DEBUG_NOW:y;w="undefined"!=typeof window?window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.mozCancelRequestAnimationFrame&&window.mozRequestAnimationFrame||setTimeout:setTimeout;var b,S,x,C;return f.prototype.tween=function(t){return this._isTweening?this:(void 0===t&&this._configured||this.setConfig(t),this._timestamp=v(),this._start(this.get(),this._attachment),this.resume())},f.prototype.setConfig=function(t){t=t||{},this._configured=!0,this._attachment=t.attachment,this._pausedAtTime=null,this._scheduleId=null,this._delay=t.delay||0,this._start=t.start||r,this._step=t.step||r,this._finish=t.finish||r,this._duration=t.duration||_,this._currentState=s({},t.from)||this.get(),this._originalState=this.get(),this._targetState=s({},t.to)||this.get();var e=this;this._timeoutHandler=function(){p(e,e._timestamp,e._delay,e._duration,e._currentState,e._originalState,e._targetState,e._easing,e._step,e._scheduleFunction)};var n=this._currentState,i=this._targetState;return a(i,n),this._easing=l(n,t.easing||g),this._filterArgs=[n,this._originalState,i,this._easing],c(this,"tweenCreated"),this},f.prototype.get=function(){return s({},this._currentState)},f.prototype.set=function(t){this._currentState=t},f.prototype.pause=function(){return this._pausedAtTime=v(),this._isPaused=!0,this},f.prototype.resume=function(){return this._isPaused&&(this._timestamp+=v()-this._pausedAtTime),this._isPaused=!1,this._isTweening=!0,this._timeoutHandler(),this},f.prototype.seek=function(t){t=Math.max(t,0);var e=v();return this._timestamp+t===0?this:(this._timestamp=e-t,this.isPlaying()||(this._isTweening=!0,this._isPaused=!1,p(this,this._timestamp,this._delay,this._duration,this._currentState,this._originalState,this._targetState,this._easing,this._step,this._scheduleFunction,e),this.pause()),this)},f.prototype.stop=function(t){return this._isTweening=!1,this._isPaused=!1,this._timeoutHandler=r,(e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.oCancelAnimationFrame||e.msCancelAnimationFrame||e.mozCancelRequestAnimationFrame||e.clearTimeout)(this._scheduleId),t&&(c(this,"beforeTween"),u(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),c(this,"afterTween"),c(this,"afterTweenEnd"),this._finish.call(this,this._currentState,this._attachment)),this},f.prototype.isPlaying=function(){return this._isTweening&&!this._isPaused},f.prototype.setScheduleFunction=function(t){this._scheduleFunction=t},f.prototype.dispose=function(){var t;for(t in this)this.hasOwnProperty(t)&&delete this[t]},f.prototype.filter={},f.prototype.formula={linear:function(t){return t}},d=f.prototype.formula,s(f,{now:v,each:o,tweenProps:u,tweenProp:h,applyFilter:c,shallowCopy:s,defaults:a,composeEasingObject:l}),"function"==typeof SHIFTY_DEBUG_NOW&&(e.timeoutHandler=p),"object"==typeof i?n.exports=f:"function"==typeof t&&t.amd?t(function(){return f}):"undefined"==typeof e.Tweenable&&(e.Tweenable=f),f}();!function(){r.shallowCopy(r.prototype.formula,{easeInQuad:function(t){return Math.pow(t,2)},easeOutQuad:function(t){return-(Math.pow(t-1,2)-1)},easeInOutQuad:function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},easeInCubic:function(t){return Math.pow(t,3)},easeOutCubic:function(t){return Math.pow(t-1,3)+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},easeInQuart:function(t){return Math.pow(t,4)},easeOutQuart:function(t){return-(Math.pow(t-1,4)-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},easeInQuint:function(t){return Math.pow(t,5)},easeOutQuint:function(t){return Math.pow(t-1,5)+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*Math.pow(t,5):.5*(Math.pow(t-2,5)+2)},easeInSine:function(t){return-Math.cos(t*(Math.PI/2))+1},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:-Math.pow(2,-10*t)+1},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-Math.pow(t-1,2))},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?.5*(t*t*(((e*=1.525)+1)*t-e)):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},elastic:function(t){return-1*Math.pow(4,-8*t)*Math.sin((6*t-1)*(2*Math.PI)/2)+1},swingFromTo:function(t){var e=1.70158;return(t/=.5)<1?.5*(t*t*(((e*=1.525)+1)*t-e)):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},swingFrom:function(t){var e=1.70158;return t*t*((e+1)*t-e)},swingTo:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},bounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},bouncePast:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?2-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?2-(7.5625*(t-=2.25/2.75)*t+.9375):2-(7.5625*(t-=2.625/2.75)*t+.984375)},easeFromTo:function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},easeFrom:function(t){return Math.pow(t,4)},easeTo:function(t){return Math.pow(t,.25)}})}(),function(){function t(t,e,n,i,r,o){function s(t){return((f*t+d)*t+w)*t}function a(t){return((g*t+_)*t+m)*t}function u(t){return(3*f*t+2*d)*t+w}function h(t){return 1/(200*t)}function c(t,e){return a(l(t,e))}function p(t){return t>=0?t:0-t}function l(t,e){var n,i,r,o,a,h;for(r=t,h=0;h<8;h++){if(o=s(r)-t,p(o)<e)return r;if(a=u(r),p(a)<1e-6)break;r-=o/a}if(n=0,i=1,r=t,r<n)return n;if(r>i)return i;for(;n<i;){if(o=s(r),p(o-t)<e)return r;t>o?n=r:i=r,r=.5*(i-n)+n}return r}var f=0,d=0,w=0,g=0,_=0,m=0;return w=3*e,d=3*(i-e)-w,f=1-w-d,m=3*n,_=3*(r-n)-m,g=1-m-_,c(t,h(o))}function e(e,n,i,r){return function(o){return t(o,e,n,i,r,1)}}r.setBezierFunction=function(t,n,i,o,s){var a=e(n,i,o,s);return a.displayName=t,a.x1=n,a.y1=i,a.x2=o,a.y2=s,r.prototype.formula[t]=a},r.unsetBezierFunction=function(t){delete r.prototype.formula[t]}}(),function(){function t(t,e,n,i,o,s){return r.tweenProps(i,e,t,n,1,s,o)}var e=new r;e._filterArgs=[],r.interpolate=function(n,i,o,s,a){var u=r.shallowCopy({},n),h=a||0,c=r.composeEasingObject(n,s||"linear");e.set({});var p=e._filterArgs;p.length=0,p[0]=u,p[1]=n,p[2]=i,p[3]=c,r.applyFilter(e,"tweenCreated"),r.applyFilter(e,"beforeTween");var l=t(n,u,i,o,c,h);return r.applyFilter(e,"afterTween"),l}}(),function(t){function e(t,e){var n,i=[],r=t.length;for(n=0;n<r;n++)i.push("_"+e+"_"+n);return i}function n(t){var e=t.match(b);return e?(1===e.length||t[0].match(v))&&e.unshift(""):e=["",""],e.join(O)}function i(e){t.each(e,function(t){var n=e[t];"string"==typeof n&&n.match(T)&&(e[t]=r(n))})}function r(t){return u(T,t,o)}function o(t){var e=s(t);return"rgb("+e[0]+","+e[1]+","+e[2]+")"}function s(t){return t=t.replace(/#/,""),3===t.length&&(t=t.split(""),t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]),I[0]=a(t.substr(0,2)),I[1]=a(t.substr(2,2)),I[2]=a(t.substr(4,2)),I}function a(t){return parseInt(t,16)}function u(t,e,n){var i=e.match(t),r=e.replace(t,O);if(i)for(var o,s=i.length,a=0;a<s;a++)o=i.shift(),r=r.replace(O,n(o));return r}function h(t){return u(x,t,c)}function c(t){for(var e=t.match(S),n=e.length,i=t.match(C)[0],r=0;r<n;r++)i+=parseInt(e[r],10)+",";return i=i.slice(0,-1)+")"}function p(i){var r={};return t.each(i,function(t){var o=i[t];if("string"==typeof o){var s=_(o);r[t]={formatString:n(o),chunkNames:e(s,t)}}}),r}function l(e,n){t.each(n,function(t){for(var i=e[t],r=_(i),o=r.length,s=0;s<o;s++)e[n[t].chunkNames[s]]=+r[s];delete e[t]})}function f(e,n){t.each(n,function(t){var i=e[t],r=d(e,n[t].chunkNames),o=w(r,n[t].chunkNames);i=g(n[t].formatString,o),e[t]=h(i)})}function d(t,e){for(var n,i={},r=e.length,o=0;o<r;o++)n=e[o],i[n]=t[n],delete t[n];return i}function w(t,e){k.length=0;for(var n=e.length,i=0;i<n;i++)k.push(t[e[i]]);return k}function g(t,e){for(var n=t,i=e.length,r=0;r<i;r++)n=n.replace(O,+e[r].toFixed(4));return n}function _(t){return t.match(S)}function m(e,n){t.each(n,function(t){var i,r=n[t],o=r.chunkNames,s=o.length,a=e[t];if("string"==typeof a){var u=a.split(" "),h=u[u.length-1];for(i=0;i<s;i++)e[o[i]]=u[i]||h}else for(i=0;i<s;i++)e[o[i]]=a;delete e[t]})}function y(e,n){t.each(n,function(t){var i=n[t],r=i.chunkNames,o=r.length,s=e[r[0]],a=typeof s;if("string"===a){for(var u="",h=0;h<o;h++)u+=" "+e[r[h]],delete e[r[h]];e[t]=u.substr(1)}else e[t]=s})}var v=/(\d|\-|\.)/,b=/([^\-0-9\.]+)/g,S=/[0-9.\-]+/g,x=new RegExp("rgb\\("+S.source+/,\s*/.source+S.source+/,\s*/.source+S.source+"\\)","g"),C=/^.*\(/,T=/#([0-9]|[a-f]){3,6}/gi,O="VAL",I=[],k=[];t.prototype.filter.token={tweenCreated:function(t,e,n,r){i(t),i(e),i(n),this._tokenData=p(t)},beforeTween:function(t,e,n,i){m(i,this._tokenData),l(t,this._tokenData),l(e,this._tokenData),l(n,this._tokenData)},afterTween:function(t,e,n,i){f(t,this._tokenData),f(e,this._tokenData),f(n,this._tokenData),y(i,this._tokenData)}}}(r)}).call(null)},{}],2:[function(t,e,n){var i=t("./shape"),r=t("./utils"),o=function(t,e){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,i.apply(this,arguments)};o.prototype=new i,o.prototype.constructor=o,o.prototype._pathString=function(t){var e=t.strokeWidth;t.trailWidth&&t.trailWidth>t.strokeWidth&&(e=t.trailWidth);var n=50-e/2;return r.render(this._pathTemplate,{radius:n,"2radius":2*n})},o.prototype._trailString=function(t){return this._pathString(t)},e.exports=o},{"./shape":7,"./utils":8}],3:[function(t,e,n){var i=t("./shape"),r=t("./utils"),o=function(t,e){this._pathTemplate="M 0,{center} L 100,{center}",i.apply(this,arguments)};o.prototype=new i,o.prototype.constructor=o,o.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 "+e.strokeWidth),t.setAttribute("preserveAspectRatio","none")},o.prototype._pathString=function(t){return r.render(this._pathTemplate,{center:t.strokeWidth/2})},o.prototype._trailString=function(t){return this._pathString(t)},e.exports=o},{"./shape":7,"./utils":8}],4:[function(t,e,n){e.exports={Line:t("./line"),Circle:t("./circle"),SemiCircle:t("./semicircle"),Path:t("./path"),Shape:t("./shape"),utils:t("./utils")}},{"./circle":2,"./line":3,"./path":5,"./semicircle":6,"./shape":7,"./utils":8}],5:[function(t,e,n){var i=t("shifty"),r=t("./utils"),o={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},s=function a(t,e){if(!(this instanceof a))throw new Error("Constructor was called without new keyword");e=r.extend({duration:800,easing:"linear",from:{},to:{},step:function(){}},e);var n;n=r.isString(t)?document.querySelector(t):t,this.path=n,this._opts=e,this._tweenable=null;var i=this.path.getTotalLength();this.path.style.strokeDasharray=i+" "+i,this.set(0)};s.prototype.value=function(){var t=this._getComputedDashOffset(),e=this.path.getTotalLength(),n=1-t/e;return parseFloat(n.toFixed(6),10)},s.prototype.set=function(t){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(t);var e=this._opts.step;if(r.isFunction(e)){var n=this._easing(this._opts.easing),i=this._calculateTo(t,n),o=this._opts.shape||this;e(i,o,this._opts.attachment)}},s.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},s.prototype.animate=function(t,e,n){e=e||{},r.isFunction(e)&&(n=e,e={});var o=r.extend({},e),s=r.extend({},this._opts);e=r.extend(s,e);var a=this._easing(e.easing),u=this._resolveFromAndTo(t,a,o);this.stop(),this.path.getBoundingClientRect();var h=this._getComputedDashOffset(),c=this._progressToOffset(t),p=this;this._tweenable=new i,this._tweenable.tween({from:r.extend({offset:h},u.from),to:r.extend({offset:c},u.to),duration:e.duration,easing:a,step:function(t){p.path.style.strokeDashoffset=t.offset;var n=e.shape||p;e.step(t,n,e.attachment)},finish:function(t){r.isFunction(n)&&n()}})},s.prototype._getComputedDashOffset=function(){var t=window.getComputedStyle(this.path,null);return parseFloat(t.getPropertyValue("stroke-dashoffset"),10)},s.prototype._progressToOffset=function(t){var e=this.path.getTotalLength();return e-t*e},s.prototype._resolveFromAndTo=function(t,e,n){return n.from&&n.to?{from:n.from,to:n.to}:{from:this._calculateFrom(e),to:this._calculateTo(t,e)}},s.prototype._calculateFrom=function(t){return i.interpolate(this._opts.from,this._opts.to,this.value(),t)},s.prototype._calculateTo=function(t,e){return i.interpolate(this._opts.from,this._opts.to,t,e)},s.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},s.prototype._easing=function(t){return o.hasOwnProperty(t)?o[t]:t},e.exports=s},{"./utils":8,shifty:1}],6:[function(t,e,n){var i=t("./shape"),r=t("./circle"),o=t("./utils"),s=function(t,e){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,i.apply(this,arguments)};s.prototype=new i,s.prototype.constructor=s,s.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 50")},s.prototype._initializeTextContainer=function(t,e,n){t.text.style&&(n.style.top="auto",n.style.bottom="0",t.text.alignToBottom?o.setStyle(n,"transform","translate(-50%, 0)"):o.setStyle(n,"transform","translate(-50%, 50%)"))},s.prototype._pathString=r.prototype._pathString,s.prototype._trailString=r.prototype._trailString,e.exports=s},{"./circle":2,"./shape":7,"./utils":8}],7:[function(t,e,n){var i=t("./path"),r=t("./utils"),o="Object is destroyed",s=function a(t,e){if(!(this instanceof a))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=r.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},e,!0),r.isObject(e)&&void 0!==e.svgStyle&&(this._opts.svgStyle=e.svgStyle),r.isObject(e)&&r.isObject(e.text)&&void 0!==e.text.style&&(this._opts.text.style=e.text.style);var n,o=this._createSvgView(this._opts);if(n=r.isString(t)?document.querySelector(t):t,!n)throw new Error("Container does not exist: "+t);this._container=n,this._container.appendChild(o.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&r.setStyles(o.svg,this._opts.svgStyle),this.svg=o.svg,this.path=o.path,this.trail=o.trail,this.text=null;var s=r.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new i(o.path,s),r.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};s.prototype.animate=function(t,e,n){if(null===this._progressPath)throw new Error(o);this._progressPath.animate(t,e,n)},s.prototype.stop=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath.stop()},s.prototype.destroy=function(){if(null===this._progressPath)throw new Error(o);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},s.prototype.set=function(t){if(null===this._progressPath)throw new Error(o);this._progressPath.set(t)},s.prototype.value=function(){if(null===this._progressPath)throw new Error(o);return void 0===this._progressPath?0:this._progressPath.value()},s.prototype.setText=function(t){if(null===this._progressPath)throw new Error(o);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),r.isObject(t)?(r.removeChildren(this.text),this.text.appendChild(t)):this.text.innerHTML=t},s.prototype._createSvgView=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(e,t);var n=null;(t.trailColor||t.trailWidth)&&(n=this._createTrail(t),e.appendChild(n));var i=this._createPath(t);return e.appendChild(i),{svg:e,path:i,trail:n}},s.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 100")},s.prototype._createPath=function(t){var e=this._pathString(t);return this._createPathElement(e,t)},s.prototype._createTrail=function(t){var e=this._trailString(t),n=r.extend({},t);return n.trailColor||(n.trailColor="#eee"),n.trailWidth||(n.trailWidth=n.strokeWidth),n.color=n.trailColor,n.strokeWidth=n.trailWidth,n.fill=null,this._createPathElement(e,n)},s.prototype._createPathElement=function(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d",t),n.setAttribute("stroke",e.color),n.setAttribute("stroke-width",e.strokeWidth),e.fill?n.setAttribute("fill",e.fill):n.setAttribute("fill-opacity","0"),n},s.prototype._createTextContainer=function(t,e){var n=document.createElement("div");n.className=t.text.className;var i=t.text.style;return i&&(t.text.autoStyleContainer&&(e.style.position="relative"),r.setStyles(n,i),i.color||(n.style.color=t.color)),this._initializeTextContainer(t,e,n),n},s.prototype._initializeTextContainer=function(t,e,n){},s.prototype._pathString=function(t){throw new Error("Override this function for each progress bar")},s.prototype._trailString=function(t){throw new Error("Override this function for each progress bar")},s.prototype._warnContainerAspectRatio=function(t){if(this.containerAspectRatio){var e=window.getComputedStyle(t,null),n=parseFloat(e.getPropertyValue("width"),10),i=parseFloat(e.getPropertyValue("height"),10);r.floatEquals(this.containerAspectRatio,n/i)||(console.warn("Incorrect aspect ratio of container","#"+t.id,"detected:",e.getPropertyValue("width")+"(width)","/",e.getPropertyValue("height")+"(height)","=",n/i),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},e.exports=s},{"./path":5,"./utils":8}],8:[function(t,e,n){function i(t,e,n){t=t||{},e=e||{},n=n||!1;for(var r in e)if(e.hasOwnProperty(r)){var o=t[r],s=e[r];n&&p(o)&&p(s)?t[r]=i(o,s,n):t[r]=s}return t}function r(t,e){var n=t;for(var i in e)if(e.hasOwnProperty(i)){var r=e[i],o="\\{"+i+"\\}",s=new RegExp(o,"g");n=n.replace(s,r)}return n}function o(t,e,n){for(var i=t.style,r=0;r<w.length;++r){var o=w[r];i[o+a(e)]=n}i[e]=n}function s(t,e){l(e,function(e,n){null!==e&&void 0!==e&&(p(e)&&e.prefix===!0?o(t,n,e.value):t.style[n]=e)})}function a(t){return t.charAt(0).toUpperCase()+t.slice(1)}function u(t){return"string"==typeof t||t instanceof String}function h(t){return"function"==typeof t}function c(t){return"[object Array]"===Object.prototype.toString.call(t)}function p(t){if(c(t))return!1;var e=typeof t;return"object"===e&&!!t}function l(t,e){for(var n in t)if(t.hasOwnProperty(n)){var i=t[n];e(i,n)}}function f(t,e){return Math.abs(t-e)<g}function d(t){for(;t.firstChild;)t.removeChild(t.firstChild)}var w="Webkit Moz O ms".split(" "),g=.001;e.exports={extend:i,render:r,setStyle:o,setStyles:s,capitalize:a,isString:u,isFunction:h,isObject:p,forEachObject:l,floatEquals:f,removeChildren:d}},{}]},{},[4])(4)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
